// splice 拼接 
// 又可以删除 又可以添加
// 返回的是删除的数据组成的新数组 没删除任何就是空数组
// 改变原数组

// const arr = [1,2,3,4,5,6,7,8]

// arr.splice(3,0,'66666','77')

// console.log(arr.splice(3,0,'66666','77'))

// 只传一个参数 从start（索引位）开始全删
// 传两个参数 从start位开始删 deleteCount数量的数据
// 传三个参数 或三个以上  从start位开始删 deleteCount数量的数据 并把第三个参数为止开始的数据 都从start开始放入 相当于 删除并添加 是一个替换的效果

// deleteCount 传0  不删任何 只添加  从start位开始放




// slice 切片 
// 复制数组中的部分数据 提取
// 不修改原数组
// 返回 由复制的元素组成的 新的数组


const arr = [1,2,3,4,5,6,7,8]
// 左闭右开  （左包含 右不包含）

// const arr2 = arr.slice()
// console.log(arr2)
// console.log(arr[arr.length - 1] === arr2[arr2.length - 1])
// arr[arr.length - 1].x = 100
// console.log(arr2)
// console.log(arr2 === arr)

// 浅拷贝 浅复制 浅克隆 针对应用类型数据 只会复制内存空间地址 指向的都是同一个内存空间地址的数据
// 深拷贝 深复制 深克隆 针对引用类型数据 会开辟新的内存空间来储存
// console.log(arr.slice(-3))

// 一个参数都不传  全部复制
// 一个参数  从这个参数索引位开始 后面全部复制
// 两个参数  左闭右开 范围全复制
// start如果是负数 从原数组中的倒数第几个元素开始提取
// 两个参数都是负数  从倒数第几取到倒数第几

const arr = [1,23,4,5,6,8]
// 分别实现
// 删掉2，3索引位，并加入一个666数字类型数据
// 从第3个索引位开始 后面全部删掉
// 从-3索引位开始 删掉2个元素 并添加自自定义的三个数据
// 不删除任何元素 从第四个索引位 添加 2个自定义数据
// 删除全部数据 原数组变成空数组

const arr1 = [1,2,3,4,5,6]
const arr2 = ["好奇","代码","三","木","嘿嘿嘿"]
const arr3 = [{x:1},{y:222},{z:666}]

// 定义一个函数 传入一个数组
// 函数会将传入的数组 掐头去尾只取中间的数据
// 并把取到的数据作为一个新数组返回 同时不改变原数组
// 参数 都是 函数

// forEach
// 数组里面有几个数据 传入的函数就会执行几次
// 每次执行被传入的匿名函数时 数组中的数据会被作为实参传入
// 返回undefined
// 不修改原函数
// 除了报错 不然 要全部迭代完才会结束 中途不能退出

// callback 回调  一般都是称呼函数
// cb
// 这个callback 可以传三个参数
// 一般 来说我们 设置两个形参
// 第一个 是迭代到的数据 第二个是改数据的索引位 第三个是调用forEach的数组
// const array1 = ['a', 'b', 'c'];

// array1.forEach(function(ele){
//   console.log(ele,this)
// } ,{x:1111});

// 箭头函数中写的this 是不可被后期修改的


// map 映射
// 返回一个新数组
// 回调函数每次执行返回的数据  会被加入到一个要返回的新数组中
// 回调函数返回的 都会被放入要被返回的新数组中
const array1 = [1, 4, 9, 16]; // [2, 8, 18, 32]
// const map1 = array1.map(x => x * 2);
const map1 = array1.map(function (x) { return x * 2})
console.log(map1)


// some 有一些

// 返回的是布尔类型的值

// cb执行后返回的如果是 真值 
// some方法立即结束 整体结果返回true
// 如果迭代完 没有一次 cb执行后返回的是真值
// some 方法 返回false

// cb 一定要有返回值

// some函数就是用来判断该数组中是否有一个元素 满足 能让cb返回真值

// filter 过滤 筛选
// 把能让回调返回真值的元素  返回 组成一个数组 返回这个新数组


// every 每一个
// 判断 传入的cb 如果每一个执行后 都返回真值 整个方法返回true
// 如果一样一次迭代执行返回假值 立即结束 立刻返回 false

// 以上方法不改变原数组

const arr = [1,"hello",3,true,'220','false']

// 定义一个函数，一个参数，可以传入一个数组，
// 函数执行后 把数组中的字符串类型的数据取出 组成一个新数组返回
// 至少用三个方式实现



// 定义一个函数，可以传入一个数组
// 如果该数组一个布尔值都没有 返回数字0
// 如果 数组有一个数据是布尔值 返回数字 1
// 如果所有 数据都是布尔值 返回 2 
